/**
 *  BASIC_BANK HUFF EXERCISE
 *
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {

    // balanceOf 0x70a08231 0x000000a000a000b000000000 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    // withdraw  0x2e1a7d4d 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

    0x00 calldataload // [ calldata ]
    0xE0 shr          // [ msg.sig ]
		dup1              // [ msg.sig, msg.sig ]

		0x2e1a7d4d eq     // [ withdraw.sig == msg.sig, msg.sig ]
		withdraw jumpi    // [ msg.sig ]

		0x70a08231 eq     // [ balanceOf.sig == msg.sig ]
		balanceOf jumpi   // [ ]

    // "receive"
    caller sload
    callvalue add
    caller sstore
    0x00 0x00 return

    error:
        0x00 0x00 revert
       
    withdraw:
        caller sload      // [ balanceOf(caller) ]
        dup1              // [ balanceOf(caller), balanceOf(caller) ]
        0x04 calldataload // [ msg.arg0, balanceOf(caller), balanceOf(caller) ]
        gt error jumpi    // [ balanceOf(caller) ]

        0x04 calldataload // [ msg.arg0, balanceOf(caller) ]
        dup1              // [ msg.arg0, msg.arg0, balanceOf(caller) ]
        swap2 sub         // [ balanceOf(caller) - msg.arg0, msg.arg0 ]
        caller sstore     // [ msg.arg0 ]

        // store call arguments in memory, then do `call`.

		    0x00 0x00 return

    balanceOf:
        0x04 calldataload // [ msg.arg0 ]
        0x60 shl 0x60 shr // [ address ]
        sload             // [ balanceOf(address) ]
        0x00 mload        // [ ]

        0x20 0x00 return 

}