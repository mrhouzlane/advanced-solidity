
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

/* Interface */
#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

/* Storage Slots */ 
#define constant VALUE_LOCATION = FREE_STORAGE_POINTER()     // Manage sequentiel storage slots 
#define constant STORE_FUNC_SIG = 0x6057361d

/* Methods */
#define macro STORE() = takes (0) returns (0) {
    0x04 calldataload     // [value] 
    [VALUE_LOCATION]      // [ptr, value]
    sstore                // []   
}

#define macro READ() = takes(0) returns(0) {
    [VALUE_LOCATION]      // [ptr]
    sload                 // [value]

    // Store value in memory 
    0x00                 // [0, value]
    mstore               

    // Return value 
    0x20                // [0x20] => 32 bytes
    0x00                // [0, 32 bytes]
    return              
}

#define macro MAIN() = takes(0) returns(0) {
    0x00                // [0]       
    calldataload        // [32 bytes of calldata from 0x00]
    0xE0                // [224 bits, calldata]
    shr                 //  calldataload is shifted right by 0xEO => [sig]

    dup1                // [msg.sig, msg.sig]
    // 0x6057361d
    __FUNC_SIG(store)   // push4 0x6057361d  => [0x6057361d == sig, sig]
    eq                  // [0x6057361d == sig, sig]  
    set                 // [set pc, 0x6057361d == sig, sig]
    jumpi               // [sig]

    __FUNC_SIG(read)    // 
    eq 
    get 
    jumpi


    // REVERT
    0x00 0x00 revert    // Protects against using functions that are not store or read

    set: 
        STORE()
    get: 
        READ()

}